{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\n\nconst _c0 = function () {\n  return [\"/users\", 10, \"Anna\"];\n};\n\nexport class UserComponent {\n  constructor(route) {\n    this.route = route;\n  }\n\n  ngOnInit() {\n    this.user = {\n      id: this.route.snapshot.params['id'],\n      name: this.route.snapshot.params['name']\n    };\n    this.paramsSubscription = this.route.params.subscribe( // this is an observable; allows for us to asynchronously execute code in the event that something occurs; \n    // in this case if the parameters of the route (id and name) change, so if a different id and/or name are selected\n    params => {\n      this.user.id = params['id'];\n      this.user.name = params['name'];\n    });\n  }\n\n  ngOnDestroy() {\n    // but this is to reference what it would look like\n    this.paramsSubscription.unsubscribe();\n  }\n\n}\n\nUserComponent.ɵfac = function UserComponent_Factory(t) {\n  return new (t || UserComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute));\n};\n\nUserComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: UserComponent,\n  selectors: [[\"app-user\"]],\n  decls: 7,\n  vars: 4,\n  consts: [[3, \"routerLink\"]],\n  template: function UserComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"p\");\n      i0.ɵɵtext(3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(4, \"hr\");\n      i0.ɵɵelementStart(5, \"a\", 0);\n      i0.ɵɵtext(6, \"Load Anna (10)\");\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\"User with ID \", ctx.user.id, \" loaded.\");\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\"User name is \", ctx.user.name, \"\");\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(3, _c0));\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJ1c2VyLmNvbXBvbmVudC5jc3MifQ== */\"]\n});","map":{"version":3,"mappings":";;;;;;;AASA,OAAM,MAAOA,aAAP,CAAoB;EAIxBC,YAAoBC,KAApB,EAAyC;IAArB;EAA0B;;EAE9CC,QAAQ;IACN,KAAKC,IAAL,GAAY;MACVC,EAAE,EAAE,KAAKH,KAAL,CAAWI,QAAX,CAAoBC,MAApB,CAA2B,IAA3B,CADM;MAEVC,IAAI,EAAE,KAAKN,KAAL,CAAWI,QAAX,CAAoBC,MAApB,CAA2B,MAA3B;IAFI,CAAZ;IAIA,KAAKE,kBAAL,GAA0B,KAAKP,KAAL,CAAWK,MAAX,CACvBG,SADuB,EACZ;IACA;IACTH,MAAD,IAAkB;MAChB,KAAKH,IAAL,CAAUC,EAAV,GAAeE,MAAM,CAAC,IAAD,CAArB;MACA,KAAKH,IAAL,CAAUI,IAAV,GAAiBD,MAAM,CAAC,MAAD,CAAvB;IACD,CANqB,CAA1B;EAQD;;EAEDI,WAAW;IACW;IACpB,KAAKF,kBAAL,CAAwBG,WAAxB;EACD;;AAxBuB;;;mBAAbZ,eAAaa;AAAA;;;QAAbb;EAAac;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCT1BL;MAAGA;MAAkCA;MACrCA;MAAGA;MAA2BA;MAC9BA;MACAA;MAAyCA;MAAcA;;;;MAHpDA;MAAAA;MACAA;MAAAA;MAEAA;MAAAA","names":["UserComponent","constructor","route","ngOnInit","user","id","snapshot","params","name","paramsSubscription","subscribe","ngOnDestroy","unsubscribe","i0","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["/Users/destinyboone/Desktop/Coding/Practice Projects/angular_Routing/src/app/users/user/user.component.ts","/Users/destinyboone/Desktop/Coding/Practice Projects/angular_Routing/src/app/users/user/user.component.html"],"sourcesContent":["import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-user',\n  templateUrl: './user.component.html',\n  styleUrls: ['./user.component.css']\n})\nexport class UserComponent implements OnInit, OnDestroy {\n  user: {id: number, name: string};\n  paramsSubscription: Subscription\n\n  constructor(private route: ActivatedRoute) { }\n\n  ngOnInit() {\n    this.user = {\n      id: this.route.snapshot.params['id'], // grabs the id from the route we defined in app.module\n      name: this.route.snapshot.params['name']\n    };\n    this.paramsSubscription = this.route.params\n      .subscribe( // this is an observable; allows for us to asynchronously execute code in the event that something occurs; \n                  // in this case if the parameters of the route (id and name) change, so if a different id and/or name are selected\n        (params: Params)=>{ // takes in the updated parameters (id and name; we defined the name of these parameters in the app module)\n          this.user.id = params['id'];\n          this.user.name = params['name'];\n        }\n      );\n  }\n\n  ngOnDestroy(): void { // if you create your own observables you must do this part, but for predefined ones like .subscribe, this is actually done automatically \n                        // but this is to reference what it would look like\n    this.paramsSubscription.unsubscribe();\n  }\n}\n","<p>User with ID {{ user.id }} loaded.</p>\n<p>User name is {{ user.name}}</p>\n<hr>\n<a [routerLink]=\"['/users', 10, 'Anna']\">Load Anna (10)</a>"]},"metadata":{},"sourceType":"module"}